#
# SConstruct for Millipede Project
# Chenfanfu Jiang, 2013
#

import os
import sys

include_paths = []
compile_flags = []
lib_paths = []
libs = []
linking_flags = []

compiler = 'g++'

compile_flags.append('-march=native')

build_type = ARGUMENTS.get('type','release')
if build_type == 'release':

    build_dir = 'build/release'
    compile_flags.append('-DNDEBUG')
    compile_flags.append('-O3')

elif build_type == 'debug':

    build_dir = 'build/debug'
    compile_flags.append('-g')
    linking_flags.append('-g')
    
elif build_type == 'profile':

    build_dir = 'build/profile'
    compile_flags.append('-pg')
    linking_flags.append('-pg')

else:
    print 'scons type=(release|debug|profile)'
    sys.exit(1)

compile_flags.append('-Wno-deprecated')
compile_flags.append('-fpermissive')
compile_flags.append('-std=c++0x')

#############################################################################
#    What Really Matters
#############################################################################
boost_root = os.environ.get('BOOST_ROOT')
if boost_root is None:
   print 'Environment variable BOOST_ROOT not set.\nPlease set and re-run.'
   sys.exit(1)
if boost_root[-1] is not '/' or boost_root[-1] is not '\\':
   boost_root += '/'

include_paths.append('/usr/include')
include_paths.append('/usr/local/include')
include_paths.append(boost_root)
include_paths.append('../Source')

# lib_paths.append('/usr/lib')
# lib_paths.append('/usr/local/lib')
# lib_paths.append('/usr/share/lib')

libs.append('GL')
libs.append('glut')
libs.append('GLEW')

#############################################################################

env = Environment(
    CXX=compiler,
    CPPFLAGS=compile_flags,
    CPPPATH=include_paths,
    LIBPATH=lib_paths,
    LIBS=libs,
    LINKFLAGS=linking_flags
    )

Export('env')

env.SConscript('SConscript', build_dir=build_dir, duplicate=0)

if os.path.exists('./Millipede'+build_type) == False:
    os.system('ln -s build/'+build_type+'/Millipede Millipede_'+build_type)
